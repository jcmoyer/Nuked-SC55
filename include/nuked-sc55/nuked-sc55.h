#ifndef NUKED_SC55_H
#define NUKED_SC55_H

#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Opaque type. */
struct SC55_Emulator;

typedef enum {
    SC55_OK = 0,
    SC55_ALLOC_FAILED,

    // Caller provided a parameter that is out of range.
    SC55_INVALID_PARAM,

    // TODO: more specific error codes. C++ API needs to return something other than bool.
    SC55_LOADROMS_FAILED,

    // TODO: all error codes
} SC55_Error;

SC55_Error SC55_Create(SC55_Emulator** out_emu);
void       SC55_Destroy(SC55_Emulator* emu);

typedef enum {
    SC55_LOADROMS_AUTODETECT,
    SC55_LOADROMS_SC55MK1,
    SC55_LOADROMS_SC55MK2,
    SC55_LOADROMS_ST,
    SC55_LOADROMS_CM300,
    SC55_LOADROMS_JV880,
    SC55_LOADROMS_SCB55,
    SC55_LOADROMS_RLP3237,
    SC55_LOADROMS_SC155,
    SC55_LOADROMS_SC155MK2,
} SC55_LoadRomsType;

/**
 * Load roms from a directory. This should be called after SC55_Create and before any other functions.
 * `directory` is expected to be a UTF-8 encoded string.
 */
SC55_Error SC55_LoadRoms(SC55_Emulator* emu, const char* directory, SC55_LoadRomsType type);

typedef void(*SC55_SampleCallback)(void* userdata, int32_t left, int32_t right);

/* Sets a callback that will receive sample data as it is generated by the emulator. */
void SC55_SetSampleCallback(SC55_Emulator* emu, SC55_SampleCallback callback, void* userdata);

/* Advances the emulator state. This should be called in a loop to continuously generate sample data. */
void SC55_Step(SC55_Emulator* emu);

/* Post MIDI data to the emulator. This function is threadsafe. */
void SC55_PostMIDI(SC55_Emulator* emu, const void* ptr, size_t count);

/**
 * Returns the output frequency in hz. This value varies depending on the romset.
 */
uint32_t SC55_GetOutputFrequency(SC55_Emulator* emu);

#ifdef __cplusplus
}
#endif

#endif
